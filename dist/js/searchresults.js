!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){var r,o,i;
/*!
 * mustache.js - Logic-less {{mustache}} templates with JavaScript
 * http://github.com/janl/mustache.js
 */
/*!
 * mustache.js - Logic-less {{mustache}} templates with JavaScript
 * http://github.com/janl/mustache.js
 */
!function(n,c){"object"==typeof t&&t&&"string"!=typeof t.nodeName?c(t):(o=[t],void 0===(i="function"==typeof(r=c)?r.apply(t,o):r)||(e.exports=i))}(0,function(e){var t=Object.prototype.toString,n=Array.isArray||function(e){return"[object Array]"===t.call(e)};function r(e){return"function"==typeof e}function o(e){return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}function i(e,t){return null!=e&&"object"==typeof e&&t in e}function c(e,t){return null!=e&&"object"!=typeof e&&e.hasOwnProperty&&e.hasOwnProperty(t)}var u=RegExp.prototype.test;var a=/\S/;function l(e){return!function(e,t){return u.call(e,t)}(a,e)}var s={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"};var f=/\s*/,p=/\s+/,d=/\s*=/,v=/\s*\}/,h=/#|\^|\/|>|\{|&|=|!/;function y(e){this.string=e,this.tail=e,this.pos=0}function g(e,t){this.view=e,this.cache={".":this.view},this.parent=t}function m(){this.cache={}}y.prototype.eos=function(){return""===this.tail},y.prototype.scan=function(e){var t=this.tail.match(e);if(!t||0!==t.index)return"";var n=t[0];return this.tail=this.tail.substring(n.length),this.pos+=n.length,n},y.prototype.scanUntil=function(e){var t,n=this.tail.search(e);switch(n){case-1:t=this.tail,this.tail="";break;case 0:t="";break;default:t=this.tail.substring(0,n),this.tail=this.tail.substring(n)}return this.pos+=t.length,t},g.prototype.push=function(e){return new g(e,this)},g.prototype.lookup=function(e){var t,n=this.cache;if(n.hasOwnProperty(e))t=n[e];else{for(var o,u,a,l=this,s=!1;l;){if(e.indexOf(".")>0)for(o=l.view,u=e.split("."),a=0;null!=o&&a<u.length;)a===u.length-1&&(s=i(o,u[a])||c(o,u[a])),o=o[u[a++]];else o=l.view[e],s=i(l.view,e);if(s){t=o;break}l=l.parent}n[e]=t}return r(t)&&(t=t.call(this.view)),t},m.prototype.clearCache=function(){this.cache={}},m.prototype.parse=function(t,r){var i=this.cache,c=t+":"+(r||e.tags).join(":"),u=i[c];return null==u&&(u=i[c]=function(t,r){if(!t)return[];var i,c,u,a=[],s=[],g=[],m=!1,b=!1;function w(){if(m&&!b)for(;g.length;)delete s[g.pop()];else g=[];m=!1,b=!1}function S(e){if("string"==typeof e&&(e=e.split(p,2)),!n(e)||2!==e.length)throw new Error("Invalid tags: "+e);i=new RegExp(o(e[0])+"\\s*"),c=new RegExp("\\s*"+o(e[1])),u=new RegExp("\\s*"+o("}"+e[1]))}S(r||e.tags);for(var k,E,x,T,q,A,L=new y(t);!L.eos();){if(k=L.pos,x=L.scanUntil(i))for(var C=0,j=x.length;C<j;++C)l(T=x.charAt(C))?g.push(s.length):b=!0,s.push(["text",T,k,k+1]),k+=1,"\n"===T&&w();if(!L.scan(i))break;if(m=!0,E=L.scan(h)||"name",L.scan(f),"="===E?(x=L.scanUntil(d),L.scan(d),L.scanUntil(c)):"{"===E?(x=L.scanUntil(u),L.scan(v),L.scanUntil(c),E="&"):x=L.scanUntil(c),!L.scan(c))throw new Error("Unclosed tag at "+L.pos);if(q=[E,x,k,L.pos],s.push(q),"#"===E||"^"===E)a.push(q);else if("/"===E){if(!(A=a.pop()))throw new Error('Unopened section "'+x+'" at '+k);if(A[1]!==x)throw new Error('Unclosed section "'+A[1]+'" at '+k)}else"name"===E||"{"===E||"&"===E?b=!0:"="===E&&S(x)}if(A=a.pop())throw new Error('Unclosed section "'+A[1]+'" at '+L.pos);return function(e){for(var t,n=[],r=n,o=[],i=0,c=e.length;i<c;++i)switch((t=e[i])[0]){case"#":case"^":r.push(t),o.push(t),r=t[4]=[];break;case"/":o.pop()[5]=t[2],r=o.length>0?o[o.length-1][4]:n;break;default:r.push(t)}return n}(function(e){for(var t,n,r=[],o=0,i=e.length;o<i;++o)(t=e[o])&&("text"===t[0]&&n&&"text"===n[0]?(n[1]+=t[1],n[3]=t[3]):(r.push(t),n=t));return r}(s))}(t,r)),u},m.prototype.render=function(e,t,n,r){var o=this.parse(e,r),i=t instanceof g?t:new g(t);return this.renderTokens(o,i,n,e)},m.prototype.renderTokens=function(e,t,n,r){for(var o,i,c,u="",a=0,l=e.length;a<l;++a)c=void 0,"#"===(i=(o=e[a])[0])?c=this.renderSection(o,t,n,r):"^"===i?c=this.renderInverted(o,t,n,r):">"===i?c=this.renderPartial(o,t,n,r):"&"===i?c=this.unescapedValue(o,t):"name"===i?c=this.escapedValue(o,t):"text"===i&&(c=this.rawValue(o)),void 0!==c&&(u+=c);return u},m.prototype.renderSection=function(e,t,o,i){var c=this,u="",a=t.lookup(e[1]);if(a){if(n(a))for(var l=0,s=a.length;l<s;++l)u+=this.renderTokens(e[4],t.push(a[l]),o,i);else if("object"==typeof a||"string"==typeof a||"number"==typeof a)u+=this.renderTokens(e[4],t.push(a),o,i);else if(r(a)){if("string"!=typeof i)throw new Error("Cannot use higher-order sections without the original template");null!=(a=a.call(t.view,i.slice(e[3],e[5]),function(e){return c.render(e,t,o)}))&&(u+=a)}else u+=this.renderTokens(e[4],t,o,i);return u}},m.prototype.renderInverted=function(e,t,r,o){var i=t.lookup(e[1]);if(!i||n(i)&&0===i.length)return this.renderTokens(e[4],t,r,o)},m.prototype.renderPartial=function(e,t,n){if(n){var o=r(n)?n(e[1]):n[e[1]];return null!=o?this.renderTokens(this.parse(o),t,n,o):void 0}},m.prototype.unescapedValue=function(e,t){var n=t.lookup(e[1]);if(null!=n)return n},m.prototype.escapedValue=function(t,n){var r=n.lookup(t[1]);if(null!=r)return e.escape(r)},m.prototype.rawValue=function(e){return e[1]},e.name="mustache.js",e.version="3.0.0",e.tags=["{{","}}"];var b=new m;return e.clearCache=function(){return b.clearCache()},e.parse=function(e,t){return b.parse(e,t)},e.render=function(e,t,r,o){if("string"!=typeof e)throw new TypeError('Invalid template! Template should be a "string" but "'+function(e){return n(e)?"array":typeof e}(e)+'" was given as the first argument for mustache#render(template, view, partials)');return b.render(e,t,r,o)},e.to_html=function(t,n,o,i){var c=e.render(t,n,o);if(!r(i))return c;i(c)},e.escape=function(e){return String(e).replace(/[&<>"'`=\/]/g,function(e){return s[e]})},e.Scanner=y,e.Context=g,e.Writer=m,e})},function(e){e.exports=[{title:"Fruits",items:[{name:"Apples",code:"1001"},{name:"Blackberries",code:"289"},{name:"Raspberries",code:"rasp-1234"}]},{title:"Vegetables",items:[{name:"Beets",code:"123"},{name:"Eggplant",code:"124"},{name:"Spinach",code:"125"}]},{title:"Nuts",items:[{name:"Almonds",code:"126"},{name:"Pecans",code:"127"},{name:"Walnuts",code:"128"}]},{title:"Meats",items:[{name:"Chicken",code:"129"},{name:"Fish",code:"130"},{name:"Turkey",code:"131"}]}]},function(e,t){e.exports=function(e){return String(e).replace(/([.*+?=^!:${}()|[\]\/\\])/g,"\\$1")}},function(e,t,n){},function(e,t,n){"use strict";n.r(t);n(3);var r=n(1);function o(e){return null!==e.offsetParent}function i(e){return Array.from(e).filter(o)}function c(e,t){var n=[],r="prev"===t?"previousElementSibling":"nextElementSibling";for(e=e[r];e;)n.push(e),e=e[r];return n}function u(e,t,n){var r=document.createEvent("Event");Object.assign(r,n),r.initEvent(t,!0,!0),e.dispatchEvent(r)}var a={isVisible:o,getVisible:i,hasVisible:function(e){return i(e).length>0},getSiblings:c,visibleSiblings:function(e,t){var n=c(e,t);return Array.from(n).filter(function(e){return e}).filter(o)},keyUp:function(e,t){u(e,"keyup",{key:t})},keyDown:function(e,t){u(e,"keydown",{key:t})},change:function(e){u(e,"change")},submit:function(e){u(e,"submit")}},l=n(0),s=n.n(l);var f={init:function(e,t){var n=document.querySelector("#category-template");n&&((function(e,t){var n=document.createElement("div");if(n.id="categories",e){var r=e.previousElementSibling;e.remove(),r.insertAdjacentElement("afterend",n)}else{var o=document.createElement("p");o.appendChild(document.createTextNode("Categories to toggle")),t.insertAdjacentElement("afterend",o),o.insertAdjacentElement("afterend",n)}return n}(document.querySelector("#categories"),t)).innerHTML=e.reduce(function(e,t,r){var o={category:{index:r,title:t.title}};return e+s.a.render(n.innerHTML,o)},""))}};function p(e){var t=window.getComputedStyle(e);return parseInt(t.height)}function d(e,t){return e.offsetTop-t.offsetTop-(p(t)-e.offsetHeight)}function v(e,t){var n=t.scrollTop+t.offsetTop;return e.offsetTop-n}function h(e){var t=window.getComputedStyle(e);return"scroll"===t.overflow||"auto"===t.overflow||"scroll"===t.overflowX||"auto"===t.overflowX||"scroll"===t.overflowY||"auto"===t.overflowY}function y(e){for(var t=e.parentNode;!h(t)&&"HTML"!==t.nodeName;)t=t.parentNode;return t}function g(e){return e.offsetHeight}var m={intoView:function(e){var t=y(e);d(e,t)>0&&function(e,t){var n=d(e,t);t.scrollTop=t.scrollTop+n}(e,t),v(e,t)<0&&function(e,t){var n=v(e,t);t.scrollTop=t.scrollTop+n}(e,t)},outerDistanceBetween:function(e,t){var n=function(e,t){return e.offsetTop-t.offsetTop}(e,t);return n>=0?n+g(e):n+g(t)},innerHeight:p,getScrollContainer:y};function b(e){return m.getScrollContainer(e)===e.parentNode}function w(e){for(var t=e;!b(t)&&"HTML"!==t.nodeName;)t=t.parentNode;return t}function S(e){(function(e){m.intoView(e)})(e=w(e)),function(e){var t=function(e){return e.querySelectorAll("button, [href], input, select, textarea, [tabindex]:not([tabindex='-1'])")}(e);t&&t[0].focus()}(e)}function k(e,t){var n=e;b(e)||(n=w(e)),(n=t(n))||(n=e),S(n)}function E(e){var t=m.getScrollContainer(e);return e.parentNode===t}function x(e){for(var t=e;!E(t)&&"HTML"!==t.nodeName;)t=t.parentNode;return t}function T(e){var t=m.getScrollContainer(e),n=Array.from(t.children),r=function(e,t){var n=x(e);return function(e){var r=m.outerDistanceBetween(n,e);return r>0&&r<t}}(e,m.innerHeight(t));return n.filter(r)[0]}function q(e){var t=m.getScrollContainer(e),n=Array.from(t.children),r=function(e,t){var n=x(e);return function(e){var r=m.outerDistanceBetween(e,n);return r>0&&r<t}}(e,m.innerHeight(t));return n.filter(r).pop()}var A={keydownHandler:function(e){var t=e.target;"PageUp"===e.key&&(function(e){S(e=T(e))}(t),e.preventDefault()),"PageDown"===e.key&&(function(e){S(e=q(e))}(t),e.preventDefault()),"End"===e.key&&(function(e){var t;b(e)||(t=w(e)),(t=a.visibleSiblings(t,"next").pop())||(t=e),S(t)}(t),e.preventDefault()),"Home"===e.key&&(function(e){var t;b(e)||(t=w(e)),(t=a.visibleSiblings(t,"prev").pop())||(t=e),S(t)}(t),e.preventDefault()),"ArrowUp"===e.key&&(function(e){k(e,function(e){return a.visibleSiblings(e,"prev")[0]})}(t),e.preventDefault()),"ArrowDown"===e.key&&(function(e){k(e,function(e){return a.visibleSiblings(e,"next")[0]})}(t),e.preventDefault())},moveTo:S},L="#categories",C="input[type=checkbox]";var j={addCheckboxEvent:function(e,t){document.querySelector(L).addEventListener(e,function(e){e.target.matches(C)&&t(e)})},uncheckByValue:function(e){var t=function(e){return document.querySelector("input[value="+e+"]")}(e);t.checked&&t.click()},checkFirst:function(){var e=document.querySelector(L).querySelectorAll(C),t=a.getVisible(e)[0];t.checked||t.click(),t.focus()},reset:function(){var e=document.querySelector(L).querySelectorAll(C);Array.from(e).filter(function(e){return e.checked}).forEach(function(e){return e.click()})},init:function(){document.querySelector(L).addEventListener("keydown",A.keydownHandler)}};var N={init:function(e){var t=document.querySelector("#result-template");if(t){var n=document.querySelector("#clearAll");((function(e,t){return e&&e.remove(),(e=document.createElement("div")).id="results",t.insertAdjacentElement("afterend",e),e})(document.querySelector("#results"),n)).innerHTML=e.reduce(function(e,n,r){var o={results:{index:r,title:n.title,food:n.items}};return e+s.a.render(t.innerHTML,o)},"")}}},H="#results",V=".result",U=".close",D="#clearAll";function M(e){for(var t=e.parentNode;!t.classList.contains("result")&&"HTML"!==t.nodeName;)t=t.parentNode;return t.id}function O(e,t){document.querySelector(H).addEventListener(e,function(e){e.target.matches(U)&&t(e)})}function P(e){var t=M(e.target);document.querySelector("#"+t).classList.add("hide")}function B(e,t){document.querySelector(D).addEventListener(e,t)}function _(){document.querySelectorAll(V).forEach(function(e){return e.classList.add("hide")})}var R={addClosebuttonsEvent:O,addClearallEvent:B,getName:M,toggle:function(e,t){var n=document.querySelector(D);e.classList.toggle("hide",!t);var r=document.querySelectorAll(V),o=a.hasVisible(r);n.classList.toggle("hide",!o)},init:function(){document.querySelectorAll(V).forEach(function(e){return e.classList.add("hide")}),O("click",P),document.querySelector(D).classList.add("hide"),B("click",_)}},F=n(2),I=n.n(F);var $=function(e,t){function n(e,t){t.querySelectorAll("label").forEach(function(t){t.innerHTML=function(e,t){var n=new RegExp("("+I()(t)+")","gi");return e.replace(n,"<b>$1</b>")}(t.innerText,e)})}function r(e){var t=e.parentNode;t.style.display="",t.classList.remove("hide")}t.addEventListener("keyup",function(t){var o=t.target.value;Array.from(e.querySelectorAll("p")).forEach(function(e){return e.classList.add("hide")});var i=e.querySelectorAll("input[type=checkbox]");Array.from(i).filter(function(e){var t=e.nextElementSibling;return function(e,t){return t.toLowerCase().indexOf(e.toLowerCase())>-1}(o,t.innerText)}).forEach(r),n(o,e)})},W="#categories",X="#search",Y="#categorysearch";function z(e){var t=R.getName(e.target);j.uncheckByValue(t)}function G(e){var t=e.target,n=document.querySelector("#"+t.value);R.toggle(n,t.checked)}function J(){var e=document.querySelector(Y);e.value="",a.keyUp(e),j.reset(),e.focus()}function K(e){e.preventDefault(),j.checkFirst()}({init:function(e){var t=document.querySelector(X),n=f.init(e,t);N.init(e,n),function(){var e=document.querySelector(Y),t=document.querySelector(W);$(t,e),j.init(),j.addCheckboxEvent("click",G),R.init(),R.addClosebuttonsEvent("click",z),document.querySelector(X).addEventListener("submit",K),R.addClearallEvent("click",J)}()}}).init(r)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,